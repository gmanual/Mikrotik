:global ssid;
:global defconfMode;
:log info Starting_defconf_script_;
#-------------------------------------------------------------------------------
# Apply configuration.
# these commands are executed after installation or configuration reset
#-------------------------------------------------------------------------------

# wait for interfaces
:local count 0; 
:while ([/interface ethernet find] = "") do={ 
	:if ($count = 30) do={
		:log warning "DefConf: Unable to find ethernet interfaces";
		/quit;
	}
	:delay 1s; :set count ($count +1); 
};

:local count 0;
:while ($count < 41) do={
	:set count ($count +1);
	:delay 1s;
	:if ([/interface wireless print count-only] < 1) do={ 
		:if ($count = 40) do={
			:do {
				:log warning "DefConf: Unable to find wireless interface(s)"; 
				/ip address add address=192.168.88.1/24 interface=ether1 comment="defconf";
			} on-error={ :log info "Unable to find wireless interface";};
		};
	};
};
:do {
	/interface wireless {
		set wlan1 mode=ap-bridge band=2ghz-b/g/n disabled=no wireless-protocol=802.11 \
		distance=indoors 
		set wlan1 channel-width=20/40mhz-XX;
		set wlan1 frequency=auto
		:local wlanMac  [/interface wireless get wlan1 mac-address];
		:set ssid "MikroTik-$[:pick $wlanMac 9 11]$[:pick $wlanMac 12 14]$[:pick $wlanMac 15 17]"
		set wlan1 ssid=$ssid
	}
} on-error={ :log info "Failed: Wireless Configuration";};
:do {
	/interface list add name=WAN comment="defconf"
	/interface list add name=LAN comment="defconf"
} on-error={ :log info "Failed: Adding interface lists";};

:do {
	/interface bridge
	add name=bridge disabled=no auto-mac=yes protocol-mode=rstp comment=defconf;
	:local bMACIsSet 0;
	:foreach k in=[/interface find where !(slave=yes  || name="ether1" || name~"bridge")] do={
		:local tmpPortName [/interface get $k name];
		:log info "port: $tmpPortName"
		:if ($bMACIsSet = 0) do={
			:if ([/interface get $k type] = "ether") do={
				/interface bridge set "bridge" auto-mac=no admin-mac=[/interface ethernet get $tmpPortName mac-address];
				:set bMACIsSet 1;
			}
		}
		/interface bridge port
		add bridge=bridge interface=$tmpPortName comment=defconf;
	}
} on-error={ :log info "Failed: Adding Bridge";};

:do {
	/ip pool add name="default-dhcp" ranges=192.168.88.10-192.168.88.254;
	/ip dhcp-server add name=defconf address-pool="default-dhcp" interface=bridge lease-time=10m disabled=no;
	/ip dhcp-server network add address=192.168.88.0/24 gateway=192.168.88.1 comment="defconf";
} on-error={ :log info "Failed: Adding DHCP";};

:do {
	/ip address add address=192.168.88.1/24 interface=bridge comment="defconf";
	/ip dhcp-client add interface=ether1 disabled=no comment="defconf";
} on-error={ :log info "Failed: Adding IP Configuration";};

:do {
	/interface list member add list=LAN interface=bridge comment="defconf"
	/interface list member add list=WAN interface=ether1 comment="defconf"
} on-error={ :log info "Failed: Adding Interfaces to Lists";};

:do {
	/ip firewall nat add chain=srcnat out-interface-list=WAN ipsec-policy=out,none action=masquerade comment="defconf: masquerade"
	/ip firewall {
		filter add chain=input action=accept connection-state=established,related,untracked comment="defconf: accept established,related,untracked"
		filter add chain=input action=drop connection-state=invalid comment="defconf: drop invalid"
		filter add chain=input action=accept protocol=icmp comment="defconf: accept ICMP"
		filter add chain=input action=drop in-interface-list=!LAN comment="defconf: drop all not coming from LAN"
		filter add chain=forward action=accept ipsec-policy=in,ipsec comment="defconf: accept in ipsec policy"
		filter add chain=forward action=accept ipsec-policy=out,ipsec comment="defconf: accept out ipsec policy"
		filter add chain=forward action=fasttrack-connection connection-state=established,related comment="defconf: fasttrack"
		filter add chain=forward action=accept connection-state=established,related,untracked comment="defconf: accept established,related, untracked"
		filter add chain=forward action=drop connection-state=invalid comment="defconf: drop invalid"
		filter add chain=forward action=drop connection-state=new connection-nat-state=!dstnat in-interface-list=WAN comment="defconf:  drop all from WAN not DSTNATed"
	}
} on-error={ :log info "Failed: Adding Firewall Configuration";};

:do {
	/ip neighbor discovery-settings set discover-interface-list=LAN
} on-error={ :log info "Failed: Adding neighbor Configuration";};

:do {
	/tool mac-server set allowed-interface-list=LAN
	/tool mac-server mac-winbox set allowed-interface-list=LAN
} on-error={ :log info "Failed: Adding mac-server Configuration";};

:do {
	/ip dns {
		set allow-remote-requests=yes
		static add name=router.lan address=192.168.88.1
	}
} on-error={ :log info "Failed: Adding dns Configuration";};

# Techpath Configuration

:local RemoteAccess [:toarray value="103.17.250.33"];
:local PrivateNetworks [:toarray value="192.168.0.0/16,172.16.0.0/12,10.0.0.0/8"];

:local WinboxAllow "192.168.0.0/16,172.16.0.0/12,10.0.0.0/8,103.17.250.33";

:local Bongon [:toarray value="240.0.0.0/4,224.0.0.0/4,100.64.0.0/10,127.0.0.0/8,0.0.0.0/8,169.254.0.0/16,192.0.0.0/24,198.51.100.0/24,192.0.2.0/24,198.18.0.0/15,203.0.113.0/24"];
:local BlacklistsArray { "Bongon"=$Bongon }

:local WhitelistsArray { "PrivateNetworks"=$PrivateNetworks ; "RemoteAccess"=$RemoteAccess }

:local WinboxAllow "192.168.0.0/16,172.16.0.0/12,10.0.0.0/8,103.17.250.33";

:do {
	/ip service set winbox address=$WinboxAllow
	:log info "Success: Adding Winbox Allowed";
} on-error={ :log info "Failed: Adding $address to $whitelist failed";};

:do {
	/ip service {
		set telnet disabled=yes
		set ftp disabled=yes
		set www disabled=yes
		set ssh disabled=yes
		set api disabled=yes
		set api-ssl disabled=yes
		set www-ssl disabled=yes
		:log info "Success: Locking down services.";
    }
} on-error={ :log info "Failed: Locking down services.";};

:do {
	/ip firewall service-port {
		set ftp disabled=yes
		set tftp disabled=yes
		set irc disabled=yes
		set h323 disabled=yes
		set sip disabled=yes
		set pptp disabled=yes
		set udplite disabled=yes
		set dccp disabled=yes
		set sctp disabled=yes
		:log info "Success: Locking down service ports.";
    }
} on-error={ :log info "Failed: Locking down service ports.";};


:foreach whitelist,whitelistips in=$WhitelistsArray do={
	:foreach address in=$whitelistips do={
			:local WinboxAllow 
			:do {
				/ip firewall address-list add list=$whitelist address=$address
				:log info "Success: Adding $address to $whitelist";
			} on-error={ :log info "Failed: Adding $address to $whitelist"; };
	}
	:if ([/ip firewall filter find comment="$whitelist Input Rule"] = "") do={
		:do {
			/ip firewall filter add action=accept src-address-list=$whitelist place-before=0 chain=input comment="$whitelist Input Rule"
			:log info "Success: Adding firewall input rule $whitelist";
		} on-error={ :log info "Failed: Adding firewall $whitelist input rule $whitelist";};
	} else={
		:log info "Success: Exisitng firewall input rule $whitelist";
	}
}

:foreach blacklist,blacklistips in=$BlacklistsArray do={
	:foreach address in=$blacklistips do={
			:do {
				/ip firewall address-list add list=$blacklist address=$address
				:log info "Success: Adding $address to $blacklist";
			} on-error={ :log info "Failed: Adding $address to $blacklist failed"};
	}
	:if ([/ip firewall raw find comment="$blacklist Raw Rule"] = "") do={
		:do {
			/ip firewall raw add action=drop src-address-list=$blacklist chain=prerouting comment="$blacklist Raw Rule"
			:log info "Success: Adding firewall input rule $blacklist";
		} on-error={ :log info "Failed: Adding firewall $blacklist input rule $blacklist";};
	} else={
		:log info "Success: Exisitng firewall input rule $blacklist";
	}
}

:do {
	/system ntp client set enabled=yes server-dns-names=0.au.pool.ntp.org,1.au.pool.ntp.org,2.au.pool.ntp.org,3.au.pool.ntp.org
	/ip dns set allow-remote-requests=yes servers=1.1.1.1,1.0.0.1
} on-error={ :log info "Failed: Adding ntp/dns Configuration";};

:do {
	/interface wireless {
		set wlan1 mode=ap-bridge band=2ghz-b/g/n disabled=no wireless-protocol=802.11 distance=indoors 
		set wlan1 channel-width=20/40mhz-XX;
		set wlan1 frequency=auto
		:local wlanMac  [/interface wireless get wlan1 mac-address];
		:local ssid
		:set ssid "TP-MikroTik-$[:pick $wlanMac 9 11]$[:pick $wlanMac 12 14]$[:pick $wlanMac 15 17]"
		/interface wireless set wlan1 ssid=$ssid
	}
} on-error={ :log info "Failed: Adding wireless Configuration";};



